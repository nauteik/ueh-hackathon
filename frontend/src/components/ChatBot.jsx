import React, { useState, useRef, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import './ChatBot.css'

const ChatBot = () => {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o v·ªÅ ngh·ªá thu·∫≠t R·ªëi n∆∞·ªõc Vi·ªát Nam. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ l·ªãch s·ª≠, k·ªπ thu·∫≠t bi·ªÉu di·ªÖn v√† vƒÉn h√≥a truy·ªÅn th·ªëng n√†y.",
      isBot: true,
      timestamp: new Date()
    }
  ])
  const [inputValue, setInputValue] = useState('')
  const videoRef = useRef(null)
  const messagesEndRef = useRef(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  useEffect(() => {
    if (videoRef.current) {
      videoRef.current.play().catch(e => {
        console.log("Video autoplay failed:", e)
        // Show fallback if autoplay fails
        const fallback = document.querySelector('.avatar-fallback')
        if (fallback) {
          fallback.style.opacity = '1'
        }
      })
    }
  }, [])

  const handleSendMessage = () => {
    if (inputValue.trim() === '') return

    const newMessage = {
      id: messages.length + 1,
      text: inputValue,
      isBot: false,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, newMessage])
    setInputValue('')

    // Simulate bot response
    setTimeout(() => {
      const botResponse = getBotResponse(inputValue)
      const botMessage = {
        id: messages.length + 2,
        text: botResponse,
        isBot: true,
        timestamp: new Date()
      }
      setMessages(prev => [...prev, botMessage])
    }, 1000)
  }

  const getBotResponse = (userMessage) => {
    const message = userMessage.toLowerCase()
    
    if (message.includes('l·ªãch s·ª≠') || message.includes('history') || message.includes('ngu·ªìn g·ªëc')) {
      return "R·ªëi n∆∞·ªõc l√† ngh·ªá thu·∫≠t bi·ªÉu di·ªÖn d√¢n gian truy·ªÅn th·ªëng c·ªßa Vi·ªát Nam, xu·∫•t hi·ªán t·ª´ th·∫ø k·ª∑ 11-12. Ngh·ªá thu·∫≠t n√†y ph√°t tri·ªÉn m·∫°nh ·ªü mi·ªÅn B·∫Øc, ƒë·∫∑c bi·ªát l√† v√πng ƒë·ªìng b·∫±ng s√¥ng H·ªìng v·ªõi c√°c l√†ng ngh·ªÅ nh∆∞ ƒê√†o Th·ª•c (Nam ƒê·ªãnh)."
    } else if (message.includes('k·ªπ thu·∫≠t') || message.includes('bi·ªÉu di·ªÖn') || message.includes('l√†m sao')) {
      return "R·ªëi n∆∞·ªõc ƒë∆∞·ª£c bi·ªÉu di·ªÖn tr√™n m·∫∑t n∆∞·ªõc, c√°c ngh·ªá nh√¢n ƒë·ª©ng trong n∆∞·ªõc ƒëi·ªÅu khi·ªÉn con r·ªëi b·∫±ng c·∫ßn tre d√†i. M·∫∑t n∆∞·ªõc v·ª´a l√† s√¢n kh·∫•u v·ª´a che gi·∫•u b√≠ m·∫≠t c·ªßa ngh·ªá thu·∫≠t n√†y. C√°c con r·ªëi ƒë∆∞·ª£c l√†m t·ª´ g·ªó sung, t√¥ v·∫Ω s·∫∑c s·ª°."
    } else if (message.includes('c√¢u chuy·ªán') || message.includes('n·ªôi dung') || message.includes('k·ªãch b·∫£n')) {
      return "C√°c v·ªü r·ªëi n∆∞·ªõc th∆∞·ªùng k·ªÉ v·ªÅ ƒë·ªùi s·ªëng n√¥ng nghi·ªáp, l·ªãch s·ª≠ anh h√πng d√¢n t·ªôc nh∆∞ Th√°nh Gi√≥ng, L√™ L·ª£i, hay nh·ªØng c√¢u chuy·ªán d√¢n gian nh∆∞ T·∫•m C√°m, c·∫£nh sinh ho·∫°t l√†ng qu√™ v·ªõi m√∫a r·ªìng, l·ªôi n∆∞·ªõc, c√¢u c√°..."
    } else if (message.includes('·ªü ƒë√¢u') || message.includes('xem') || message.includes('ƒë·ªãa ƒëi·ªÉm')) {
      return "B·∫°n c√≥ th·ªÉ xem r·ªëi n∆∞·ªõc t·∫°i Nh√† h√°t R·ªëi n∆∞·ªõc ThƒÉng Long (H√† N·ªôi), B·∫£o t√†ng D√¢n t·ªôc h·ªçc Vi·ªát Nam, c√°c l√†ng ngh·ªÅ truy·ªÅn th·ªëng nh∆∞ ƒê√†o Th·ª•c (Nam ƒê·ªãnh), ho·∫∑c trong c√°c l·ªÖ h·ªôi vƒÉn h√≥a."
    } else if (message.includes('nh·∫°c c·ª•') || message.includes('√¢m nh·∫°c') || message.includes('d√†n nh·∫°c')) {
      return "R·ªëi n∆∞·ªõc ƒë∆∞·ª£c ƒë·ªám b·∫±ng d√†n nh·∫°c c·ªï truy·ªÅn g·ªìm tr·ªëng, chi√™ng, k√®n b·∫ßu, ƒë√†n nguy·ªát, s√°o tr√∫c... C√°c ngh·ªá nh√¢n v·ª´a ƒëi·ªÅu khi·ªÉn r·ªëi v·ª´a h√°t ch√®o, t·∫°o n√™n b·∫ßu kh√¥ng kh√≠ s√¥i ƒë·ªông."
    } else if (message.includes('c·∫£m ∆°n') || message.includes('thank')) {
      return "R·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ ngh·ªá thu·∫≠t r·ªëi n∆∞·ªõc Vi·ªát Nam! Ch√∫c b·∫°n c√≥ nh·ªØng tr·∫£i nghi·ªám th√∫ v·ªã v·ªõi di s·∫£n vƒÉn h√≥a truy·ªÅn th·ªëng n√†y! üé≠"
    } else {
      return "T√¥i hi·ªÉu b·∫°n mu·ªën bi·∫øt th√™m v·ªÅ ngh·ªá thu·∫≠t r·ªëi n∆∞·ªõc Vi·ªát Nam. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ l·ªãch s·ª≠, k·ªπ thu·∫≠t bi·ªÉu di·ªÖn, n·ªôi dung c√°c v·ªü di·ªÖn, ƒë·ªãa ƒëi·ªÉm xem ho·∫∑c nh·∫°c c·ª• ƒë·ªám nh√©!"
    }
  }

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSendMessage()
    }
  }

  return (
    <>
      {/* Chat Icon */}
      <motion.div
        className="chatbot-icon"
        onClick={() => setIsOpen(!isOpen)}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        animate={isOpen ? { scale: 0.9 } : { scale: 1 }}
      >
        <div className="avatar-container">
          <video
            ref={videoRef}
            className="avatar-video"
            loop
            muted
            playsInline
            autoPlay
            onError={(e) => {
              console.log("Video failed to load:", e)
              // Hide video and show fallback if video fails to load
              if (videoRef.current) {
                videoRef.current.style.display = 'none'
              }
              const fallback = e.target.parentElement.querySelector('.avatar-fallback')
              if (fallback) {
                fallback.style.opacity = '1'
              }
            }}
            onLoadedData={() => {
              // Hide fallback when video loads successfully
              const fallback = videoRef.current?.parentElement.querySelector('.avatar-fallback')
              if (fallback) {
                fallback.style.opacity = '0'
              }
            }}
          >
            <source src="/avatar-video.mp4" type="video/mp4" />
            <source src="/avatar-video.webm" type="video/webm" />
          </video>
          {/* Fallback avatar if video doesn't load */}
          <div className="avatar-fallback">ü§ñ</div>
          <div className="online-indicator"></div>
        </div>
        {!isOpen && (
          <motion.div
            className="chat-bubble"
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 2 }}
          >
            Xin ch√†o! Mu·ªën t√¨m hi·ªÉu v·ªÅ r·ªëi n∆∞·ªõc kh√¥ng?
          </motion.div>
        )}
      </motion.div>

      {/* Chat Window */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            className="chatbot-window glass"
            initial={{ opacity: 0, scale: 0.8, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.8, y: 20 }}
            transition={{ duration: 0.3 }}
          >
            {/* Header */}
            <div className="chat-header">
              <div className="chat-header-info">
                <div className="header-avatar">
                  <video
                    className="header-avatar-video"
                    loop
                    muted
                    playsInline
                    autoPlay
                  >
                    <source src="/avatar-video.mp4" type="video/mp4" />
                    <div className="avatar-fallback-small">ü§ñ</div>
                  </video>
                </div>
                <div className="header-text">
                  <h3>Tr·ª£ l√Ω R·ªëi n∆∞·ªõc Vi·ªát Nam</h3>
                  <span className="status">üü¢ ƒêang ho·∫°t ƒë·ªông</span>
                </div>
              </div>
              <button 
                className="close-chat-btn"
                onClick={() => setIsOpen(false)}
              >
                ‚úï
              </button>
            </div>

            {/* Messages */}
            <div className="chat-messages">
              {messages.map((message) => (
                <motion.div
                  key={message.id}
                  className={`message ${message.isBot ? 'bot-message' : 'user-message'}`}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  {message.isBot && (
                    <div className="message-avatar">
                      <video
                        className="message-avatar-video"
                        loop
                        muted
                        playsInline
                        autoPlay
                      >
                        <source src="/avatar-video.mp4" type="video/mp4" />
                        <div className="avatar-fallback-tiny">ü§ñ</div>
                      </video>
                    </div>
                  )}
                  <div className="message-content">
                    <p>{message.text}</p>
                    <span className="message-time">
                      {message.timestamp.toLocaleTimeString('vi-VN', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </span>
                  </div>
                </motion.div>
              ))}
              <div ref={messagesEndRef} />
            </div>

            {/* Input */}
            <div className="chat-input-container">
              <input
                type="text"
                className="chat-input"
                placeholder="Nh·∫≠p tin nh·∫Øn..."
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
              />
              <button 
                className="send-btn"
                onClick={handleSendMessage}
                disabled={inputValue.trim() === ''}
              >
                <span className="send-icon">üì§</span>
              </button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  )
}

export default ChatBot