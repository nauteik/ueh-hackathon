import React, { useState, useEffect } from 'react'
import {
  Box,
  Container,
  Typography,
  Card,
  CardContent,
  Button,
  Grid,
  Avatar,
  Paper,
  Chip,
  IconButton,
  TextField,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Fade,
  Grow,
  Divider,
  Badge,
  Stack,
  InputAdornment
} from '@mui/material'
import { styled } from '@mui/material/styles'
import {
  Add as AddIcon,
  ThumbUp as ThumbUpIcon,
  ThumbDown as ThumbDownIcon,
  Comment as CommentIcon,
  Reply as ReplyIcon,
  Search as SearchIcon,
  TrendingUp as TrendingIcon,
  AccessTime as TimeIcon,
  Person as PersonIcon,
  Share as ShareIcon,
  Bookmark as BookmarkIcon,
  Visibility as ViewIcon,
  Star as StarIcon,
  MoreVert as MoreVertIcon
} from '@mui/icons-material'

// Enhanced Styled Components
const StyledSection = styled(Box)(({ theme }) => ({
  minHeight: '100vh',
  background: 'linear-gradient(135deg, #0B4B3A 0%, #064832 50%, #0B4B3A 100%)',
  position: 'relative',
  overflow: 'hidden',
  paddingTop: '60px',
  '&::before': {
    content: '""',
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundImage: 'radial-gradient(circle at 30% 40%, rgba(249, 185, 73, 0.08) 0%, transparent 50%), radial-gradient(circle at 70% 80%, rgba(185, 28, 28, 0.06) 0%, transparent 50%)',
    zIndex: 1
  }
}))

// Compact Post Card
const CompactCard = styled(Card)(({ theme }) => ({
  background: 'linear-gradient(145deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05))',
  backdropFilter: 'blur(20px)',
  border: '1px solid rgba(249, 185, 73, 0.2)',
  borderRadius: '16px',
  margin: theme.spacing(1, 0),
  transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
  cursor: 'pointer',
  overflow: 'hidden',
  position: 'relative',
  '&::before': {
    content: '""',
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '2px',
    background: 'linear-gradient(90deg, transparent, #F9B949, transparent)',
    opacity: 0,
    transition: 'opacity 0.3s ease'
  },
  '&:hover': {
    transform: 'translateY(-4px) scale(1.01)',
    borderColor: '#F9B949',
    boxShadow: '0 12px 40px rgba(249, 185, 73, 0.15), 0 0 0 1px rgba(249, 185, 73, 0.1)',
    '&::before': {
      opacity: 1
    }
  }
}))

const StatsCard = styled(Paper)(({ theme }) => ({
  background: 'linear-gradient(145deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05))',
  backdropFilter: 'blur(20px)',
  border: '2px solid rgba(249, 185, 73, 0.3)',
  borderRadius: '20px',
  padding: theme.spacing(3),
  textAlign: 'center',
  transition: 'all 0.4s ease',
  position: 'relative',
  overflow: 'hidden',
  '&::before': {
    content: '""',
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    background: 'linear-gradient(45deg, rgba(249, 185, 73, 0.1), transparent)',
    opacity: 0,
    transition: 'opacity 0.4s ease'
  },
  '&:hover': {
    transform: 'translateY(-5px) scale(1.05)',
    borderColor: '#F9B949',
    boxShadow: '0 15px 40px rgba(249, 185, 73, 0.2)',
    '&::before': {
      opacity: 1
    }
  }
}))

const CategoryChip = styled(Chip)(({ theme, selected }) => ({
  margin: theme.spacing(0.5, 0.5, 0.5, 0),
  borderRadius: '25px',
  background: selected 
    ? 'linear-gradient(135deg, #F9B949, #EAB308)' 
    : 'rgba(255, 255, 255, 0.1)',
  color: selected ? '#1a4d3a' : 'white',
  border: `2px solid ${selected ? '#F9B949' : 'rgba(249, 185, 73, 0.2)'}`,
  backdropFilter: 'blur(10px)',
  fontWeight: '600',
  fontSize: '0.9rem',
  height: '40px',
  transition: 'all 0.3s ease',
  '&:hover': {
    background: selected 
      ? 'linear-gradient(135deg, #EAB308, #F9B949)' 
      : 'rgba(249, 185, 73, 0.2)',
    borderColor: '#F9B949',
    transform: 'scale(1.05)'
  }
}))

const SearchField = styled(TextField)(({ theme }) => ({
  '& .MuiOutlinedInput-root': {
    background: 'linear-gradient(145deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05))',
    backdropFilter: 'blur(15px)',
    borderRadius: '20px',
    border: '2px solid rgba(249, 185, 73, 0.2)',
    transition: 'all 0.3s ease',
    '& fieldset': { 
      border: 'none'
    },
    '&:hover': {
      borderColor: 'rgba(249, 185, 73, 0.4)',
      transform: 'translateY(-2px)'
    },
    '&.Mui-focused': { 
      borderColor: '#F9B949',
      boxShadow: '0 0 20px rgba(249, 185, 73, 0.3)'
    }
  },
  '& .MuiInputBase-input': { 
    color: 'white',
    fontSize: '1rem',
    '&::placeholder': {
      color: 'rgba(255, 255, 255, 0.7)'
    }
  }
}))

const ActionButton = styled(Button)(({ variant = 'outlined', size = 'medium' }) => ({
  borderRadius: size === 'small' ? '8px' : '12px',
  textTransform: 'none',
  fontWeight: '600',
  padding: size === 'small' ? '4px 8px' : '8px 16px',
  minWidth: size === 'small' ? 'auto' : '64px',
  fontSize: size === 'small' ? '0.75rem' : '0.875rem',
  transition: 'all 0.3s ease',
  ...(variant === 'primary' && {
    background: 'linear-gradient(135deg, #B91C1C 0%, #8B0000 100%)',
    border: '2px solid #F9B949',
    color: 'white',
    '&:hover': {
      background: 'linear-gradient(135deg, #DC2626 0%, #B91C1C 100%)',
      transform: 'translateY(-2px)',
      boxShadow: '0 8px 25px rgba(185, 28, 28, 0.3)'
    }
  }),
  ...(variant === 'outlined' && {
    border: '1px solid rgba(255, 255, 255, 0.3)',
    color: 'rgba(255, 255, 255, 0.8)',
    background: 'rgba(255, 255, 255, 0.05)',
    backdropFilter: 'blur(10px)',
    '&:hover': {
      borderColor: '#F9B949',
      color: '#F9B949',
      background: 'rgba(249, 185, 73, 0.1)'
    }
  })
}))

const CompactIconButton = styled(IconButton)(({ theme }) => ({
  padding: '4px',
  color: 'rgba(255, 255, 255, 0.7)',
  transition: 'all 0.3s ease',
  '&:hover': {
    color: '#F9B949',
    transform: 'scale(1.1)',
    background: 'rgba(249, 185, 73, 0.1)'
  }
}))

const ForumSection = () => {
  const [isVisible, setIsVisible] = useState(false)
  const [selectedCategory, setSelectedCategory] = useState('all')
  const [searchTerm, setSearchTerm] = useState('')
  const [openNewPost, setOpenNewPost] = useState(false)
  const [newPostTitle, setNewPostTitle] = useState('')
  const [newPostContent, setNewPostContent] = useState('')
  const [newPostCategory, setNewPostCategory] = useState('general')

  useEffect(() => {
    setIsVisible(true)
  }, [])

  // Enhanced Forum categories
  const categories = [
    { id: 'all', label: 'T·∫•t c·∫£', count: 5, icon: 'üìã' },
    { id: 'general', label: 'Th·∫£o lu·∫≠n chung', count: 1, icon: 'üí¨' },
    { id: 'techniques', label: 'K·ªπ thu·∫≠t m√∫a r·ªëi', count: 1, icon: 'üé≠' },
    { id: 'history', label: 'L·ªãch s·ª≠ & vƒÉn h√≥a', count: 1, icon: 'üìö' },
    { id: 'events', label: 'S·ª± ki·ªán', count: 1, icon: 'üé™' },
    { id: 'qa', label: 'H·ªèi ƒë√°p', count: 1, icon: '‚ùì' }
  ]

  // Enhanced forum posts with additional data
  const forumPosts = [
    {
      id: 1,
      title: 'K·ªπ thu·∫≠t ƒëi·ªÅu khi·ªÉn r·ªëi n∆∞·ªõc c∆° b·∫£n cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu',
      content: 'Xin ch√†o m·ªçi ng∆∞·ªùi! M√¨nh l√† ng∆∞·ªùi m·ªõi t√¨m hi·ªÉu v·ªÅ ngh·ªá thu·∫≠t r·ªëi n∆∞·ªõc. C√≥ ai c√≥ th·ªÉ chia s·∫ª nh·ªØng k·ªπ thu·∫≠t c∆° b·∫£n ƒë·ªÉ ƒëi·ªÅu khi·ªÉn con r·ªëi m·ªôt c√°ch m∆∞·ª£t m√† kh√¥ng?',
      author: 'Nguy·ªÖn VƒÉn An',
      avatar: '/api/placeholder/40/40',
      category: 'techniques',
      timestamp: '2 gi·ªù tr∆∞·ªõc',
      likes: 24,
      dislikes: 1,
      comments: 8,
      views: 156,
      isHot: true,
      isPinned: false,
      tags: ['c∆° b·∫£n', 'k·ªπ thu·∫≠t', 'ng∆∞·ªùi m·ªõi']
    },
    {
      id: 2,
      title: 'L·ªãch s·ª≠ ph√°t tri·ªÉn c·ªßa ngh·ªá thu·∫≠t r·ªëi n∆∞·ªõc t·∫°i c√°c l√†ng ngh·ªÅ',
      content: 'R·ªëi n∆∞·ªõc Vi·ªát Nam c√≥ l·ªãch s·ª≠ l√¢u ƒë·ªùi v√† ph√°t tri·ªÉn m·∫°nh t·∫°i nhi·ªÅu l√†ng ngh·ªÅ truy·ªÅn th·ªëng. B√†i vi·∫øt n√†y s·∫Ω t√¨m hi·ªÉu v·ªÅ qu√° tr√¨nh h√¨nh th√†nh v√† ph√°t tri·ªÉn...',
      author: 'Tr·∫ßn Th·ªã B√¨nh',
      avatar: '/api/placeholder/40/40',
      category: 'history',
      timestamp: '5 gi·ªù tr∆∞·ªõc',
      likes: 31,
      dislikes: 0,
      comments: 12,
      views: 234,
      isHot: true,
      isPinned: true,
      tags: ['l·ªãch s·ª≠', 'l√†ng ngh·ªÅ', 'truy·ªÅn th·ªëng']
    },
    {
      id: 3,
      title: 'S·ª± ki·ªán bi·ªÉu di·ªÖn r·ªëi n∆∞·ªõc t·∫°i Nh√† h√°t ThƒÉng Long th√°ng n√†y',
      content: 'C√°c b·∫°n c√≥ ai ƒë√£ xem ch∆∞∆°ng tr√¨nh bi·ªÉu di·ªÖn r·ªëi n∆∞·ªõc t·∫°i Nh√† h√°t ThƒÉng Long ch∆∞a? M√¨nh nghe n√≥i ch∆∞∆°ng tr√¨nh n√†y c√≥ nhi·ªÅu ti·∫øt m·ª•c m·ªõi v√† r·∫•t ƒë·∫∑c s·∫Øc.',
      author: 'L√™ Minh C∆∞·ªùng',
      avatar: '/api/placeholder/40/40',
      category: 'events',
      timestamp: '1 ng√†y tr∆∞·ªõc',
      likes: 18,
      dislikes: 2,
      comments: 6,
      views: 89,
      isHot: false,
      isPinned: false,
      tags: ['s·ª± ki·ªán', 'bi·ªÉu di·ªÖn', 'thƒÉng long']
    },
    {
      id: 4,
      title: 'H·ªèi v·ªÅ c√°ch l√†m con r·ªëi g·ªó t·∫°i nh√†',
      content: 'M√¨nh mu·ªën t·ª± l√†m con r·ªëi g·ªó ƒë·ªÉ th·ª±c h√†nh. C√≥ ai bi·∫øt lo·∫°i g·ªó n√†o ph√π h·ª£p v√† c√¥ng c·ª• c·∫ßn thi·∫øt kh√¥ng?',
      author: 'Ph·∫°m VƒÉn ƒê·ª©c',
      avatar: '/api/placeholder/40/40',
      category: 'qa',
      timestamp: '2 ng√†y tr∆∞·ªõc',
      likes: 15,
      dislikes: 0,
      comments: 9,
      views: 67,
      isHot: false,
      isPinned: false,
      tags: ['DIY', 'l√†m tay', 'g·ªó']
    },
    {
      id: 5,
      title: 'Workshop h·ªçc m√∫a r·ªëi n∆∞·ªõc mi·ªÖn ph√≠ cu·ªëi tu·∫ßn',
      content: 'Nh√† vƒÉn h√≥a qu·∫≠n 1 t·ªï ch·ª©c workshop h·ªçc m√∫a r·ªëi n∆∞·ªõc mi·ªÖn ph√≠ cho m·ªçi l·ª©a tu·ªïi. ƒêƒÉng k√Ω ngay!',
      author: 'Ho√†ng Th·ªã Mai',
      avatar: '/api/placeholder/40/40',
      category: 'general',
      timestamp: '3 ng√†y tr∆∞·ªõc',
      likes: 42,
      dislikes: 1,
      comments: 15,
      views: 301,
      isHot: true,
      isPinned: false,
      tags: ['workshop', 'mi·ªÖn ph√≠', 'h·ªçc t·∫≠p']
    }
  ]

  const handleCreatePost = () => {
    console.log('Creating post:', { newPostTitle, newPostContent, newPostCategory })
    setOpenNewPost(false)
    setNewPostTitle('')
    setNewPostContent('')
    setNewPostCategory('general')
  }

  const filteredPosts = forumPosts.filter(post => {
    const matchesCategory = selectedCategory === 'all' || post.category === selectedCategory
    const matchesSearch = post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         post.content.toLowerCase().includes(searchTerm.toLowerCase())
    return matchesCategory && matchesSearch
  })

  return (
    <StyledSection>
      <Container maxWidth="xl" sx={{ position: 'relative', zIndex: 3, py: 6 }}>
        
        {/* Enhanced Header */}
        <Fade in={isVisible} timeout={1000}>
          <Box textAlign="center" mb={6}>
            <Box mb={2}>
              <Chip
                label="üé≠ C·ªông ƒë·ªìng r·ªëi n∆∞·ªõc"
                sx={{
                  background: 'linear-gradient(135deg, rgba(249, 185, 73, 0.2), rgba(185, 28, 28, 0.2))',
                  color: '#F9B949',
                  border: '2px solid rgba(249, 185, 73, 0.4)',
                  backdropFilter: 'blur(10px)',
                  fontSize: '1rem',
                  fontWeight: '600',
                  padding: '8px 16px',
                  height: 'auto'
                }}
              />
            </Box>
            <Typography
              variant="h1"
              component="h1"
              sx={{
                fontSize: { xs: '2.5rem', md: '3.5rem' },
                fontWeight: '900',
                mb: 2,
                background: 'linear-gradient(135deg, #F9B949 0%, #ffffff 25%, #B91C1C 50%, #ffffff 75%, #F9B949 100%)',
                backgroundClip: 'text',
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent',
                fontFamily: 'Playfair Display, serif',
                lineHeight: 1.1
              }}
            >
              Di·ªÖn ƒë√†n th·∫£o lu·∫≠n
            </Typography>
            <Typography
              variant="h5"
              sx={{
                color: 'rgba(255,255,255,0.9)',
                maxWidth: '600px',
                mx: 'auto',
                lineHeight: 1.6,
                fontSize: { xs: '1rem', md: '1.3rem' },
                fontWeight: 400
              }}
            >
              K·∫øt n·ªëi c·ªông ƒë·ªìng ƒëam m√™ ngh·ªá thu·∫≠t r·ªëi n∆∞·ªõc Vi·ªát Nam
            </Typography>
          </Box>
        </Fade>

        <Grid container spacing={3}>
          {/* Enhanced Sidebar */}
          <Grid item xs={12} md={3}>
            <Grow in={isVisible} timeout={1200}>
              <Box>
                {/* Enhanced New Post Button */}
                <ActionButton
                  variant="primary"
                  fullWidth
                  startIcon={<AddIcon />}
                  onClick={() => setOpenNewPost(true)}
                  sx={{
                    mb: 3,
                    py: 2,
                    fontSize: '1rem',
                    fontWeight: 'bold'
                  }}
                >
                  T·∫°o b√†i vi·∫øt m·ªõi
                </ActionButton>

                {/* Enhanced Search */}
                <SearchField
                  fullWidth
                  placeholder="T√¨m ki·∫øm b√†i vi·∫øt..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <SearchIcon sx={{ color: 'rgba(255,255,255,0.7)' }} />
                      </InputAdornment>
                    )
                  }}
                  sx={{ mb: 3 }}
                />

                {/* Enhanced Categories */}
                <Paper
                  sx={{
                    background: 'linear-gradient(145deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05))',
                    backdropFilter: 'blur(20px)',
                    border: '2px solid rgba(249, 185, 73, 0.2)',
                    borderRadius: '20px',
                    p: 2.5,
                    position: 'relative',
                    overflow: 'hidden',
                    '&::before': {
                      content: '""',
                      position: 'absolute',
                      top: 0,
                      left: 0,
                      width: '100%',
                      height: '2px',
                      background: 'linear-gradient(90deg, transparent, #F9B949, transparent)'
                    }
                  }}
                >
                  <Typography 
                    variant="h6" 
                    sx={{ 
                      color: '#F9B949', 
                      mb: 2, 
                      fontWeight: '800',
                      fontSize: '1.2rem',
                      display: 'flex',
                      alignItems: 'center',
                      gap: 1
                    }}
                  >
                    üìÇ Danh m·ª•c
                  </Typography>
                  <Stack spacing={0.5}>
                    {categories.map((category) => (
                      <CategoryChip
                        key={category.id}
                        label={
                          <Box display="flex" alignItems="center" justifyContent="space-between" width="100%">
                            <Box display="flex" alignItems="center" gap={1}>
                              <span>{category.icon}</span>
                              <span>{category.label}</span>
                            </Box>
                            <Chip 
                              label={category.count} 
                              size="small"
                              sx={{ 
                                bgcolor: 'rgba(255,255,255,0.2)', 
                                color: 'inherit',
                                minWidth: '20px',
                                height: '18px',
                                '& .MuiChip-label': { fontSize: '0.65rem', px: 0.5 }
                              }}
                            />
                          </Box>
                        }
                        selected={selectedCategory === category.id}
                        onClick={() => setSelectedCategory(category.id)}
                        sx={{ width: '100%', justifyContent: 'space-between', height: '40px' }}
                      />
                    ))}
                  </Stack>
                </Paper>
              </Box>
            </Grow>
          </Grid>

          {/* Enhanced Main Content */}
          <Grid item xs={12} md={9}>
            <Grow in={isVisible} timeout={1400}>
              <Box>
                {/* Results header */}
                <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                  <Typography variant="h6" sx={{ color: 'white', fontWeight: '600', fontSize: '1.1rem' }}>
                    {filteredPosts.length} b√†i vi·∫øt
                  </Typography>
                  <Box display="flex" gap={1}>
                    <ActionButton variant="outlined" size="small">
                      M·ªõi nh·∫•t
                    </ActionButton>
                    <ActionButton variant="outlined" size="small">
                      Ph·ªï bi·∫øn
                    </ActionButton>
                  </Box>
                </Box>

                {/* Compact Post Cards */}
                {filteredPosts.map((post, index) => (
                  <CompactCard key={post.id}>
                    <CardContent sx={{ p: 2.5 }}>
                      {/* Compact Post Header */}
                      <Box display="flex" justifyContent="space-between" alignItems="flex-start" mb={2}>
                        <Box display="flex" alignItems="center" gap={1.5}>
                          <Avatar 
                            src={post.avatar} 
                            sx={{ 
                              width: 40, 
                              height: 40,
                              border: '2px solid rgba(249, 185, 73, 0.3)',
                              boxShadow: '0 4px 15px rgba(0,0,0,0.2)'
                            }} 
                          />
                          <Box>
                            <Typography 
                              variant="subtitle1" 
                              sx={{ 
                                color: 'white', 
                                fontWeight: '600',
                                fontSize: '1rem',
                                lineHeight: 1.2
                              }}
                            >
                              {post.author}
                            </Typography>
                            <Typography 
                              variant="body2" 
                              sx={{ 
                                color: 'rgba(255,255,255,0.6)',
                                display: 'flex',
                                alignItems: 'center',
                                gap: 0.5,
                                fontSize: '0.8rem'
                              }}
                            >
                              <TimeIcon sx={{ fontSize: '12px' }} />
                              {post.timestamp}
                            </Typography>
                          </Box>
                        </Box>
                        <Box display="flex" gap={0.5} alignItems="center">
                          {post.isPinned && (
                            <Chip
                              label="üìå"
                              size="small"
                              sx={{
                                background: 'linear-gradient(135deg, #10B981, #059669)',
                                color: 'white',
                                fontWeight: 'bold',
                                height: '20px',
                                minWidth: '30px',
                                '& .MuiChip-label': { px: 0.5, fontSize: '0.7rem' }
                              }}
                            />
                          )}
                          {post.isHot && (
                            <Chip
                              label="üî•"
                              size="small"
                              sx={{
                                background: 'linear-gradient(135deg, #F9B949, #EAB308)',
                                color: '#1a4d3a',
                                fontWeight: 'bold',
                                height: '20px',
                                minWidth: '30px',
                                '& .MuiChip-label': { px: 0.5, fontSize: '0.7rem' }
                              }}
                            />
                          )}
                          <CompactIconButton size="small">
                            <MoreVertIcon sx={{ fontSize: '16px' }} />
                          </CompactIconButton>
                        </Box>
                      </Box>

                      {/* Compact Post Title */}
                      <Typography
                        variant="h6"
                        sx={{
                          color: '#F9B949',
                          fontWeight: '700',
                          mb: 1.5,
                          cursor: 'pointer',
                          lineHeight: 1.3,
                          fontSize: '1.1rem',
                          transition: 'all 0.3s ease',
                          display: '-webkit-box',
                          WebkitLineClamp: 2,
                          WebkitBoxOrient: 'vertical',
                          overflow: 'hidden',
                          '&:hover': { 
                            textDecoration: 'underline',
                            color: '#FCD34D'
                          }
                        }}
                      >
                        {post.title}
                      </Typography>

                      {/* Compact Post Content */}
                      <Typography
                        variant="body2"
                        sx={{
                          color: 'rgba(255,255,255,0.8)',
                          mb: 2,
                          lineHeight: 1.5,
                          fontSize: '0.9rem',
                          display: '-webkit-box',
                          WebkitLineClamp: 2,
                          WebkitBoxOrient: 'vertical',
                          overflow: 'hidden'
                        }}
                      >
                        {post.content}
                      </Typography>

                      {/* Compact Tags */}
                      <Box mb={2}>
                        {post.tags.slice(0, 3).map((tag, tagIndex) => (
                          <Chip
                            key={tagIndex}
                            label={`#${tag}`}
                            size="small"
                            sx={{
                              mr: 0.5,
                              mb: 0.5,
                              background: 'rgba(185, 28, 28, 0.2)',
                              color: '#F9B949',
                              border: '1px solid rgba(249, 185, 73, 0.3)',
                              backdropFilter: 'blur(10px)',
                              fontWeight: '500',
                              fontSize: '0.7rem',
                              height: '22px',
                              '&:hover': {
                                background: 'rgba(249, 185, 73, 0.2)',
                                transform: 'scale(1.05)'
                              }
                            }}
                          />
                        ))}
                      </Box>

                      {/* Compact Actions */}
                      <Box display="flex" justifyContent="space-between" alignItems="center">
                        <Box display="flex" gap={0.5}>
                          <ActionButton
                            variant="outlined"
                            startIcon={<ThumbUpIcon sx={{ fontSize: '14px' }} />}
                            size="small"
                          >
                            {post.likes}
                          </ActionButton>
                          <ActionButton
                            variant="outlined"
                            startIcon={<CommentIcon sx={{ fontSize: '14px' }} />}
                            size="small"
                          >
                            {post.comments}
                          </ActionButton>
                          <ActionButton
                            variant="outlined"
                            startIcon={<ViewIcon sx={{ fontSize: '14px' }} />}
                            size="small"
                          >
                            {post.views}
                          </ActionButton>
                        </Box>
                        <Box display="flex" gap={0.5} alignItems="center">
                          <CompactIconButton size="small">
                            <BookmarkIcon sx={{ fontSize: '16px' }} />
                          </CompactIconButton>
                          <CompactIconButton size="small">
                            <ShareIcon sx={{ fontSize: '16px' }} />
                          </CompactIconButton>
                          <ActionButton
                            startIcon={<ReplyIcon sx={{ fontSize: '14px' }} />}
                            size="small"
                            sx={{ color: '#F9B949', fontSize: '0.75rem' }}
                          >
                            Tr·∫£ l·ªùi
                          </ActionButton>
                        </Box>
                      </Box>
                    </CardContent>
                  </CompactCard>
                ))}
              </Box>
            </Grow>
          </Grid>
        </Grid>

        {/* Enhanced New Post Dialog */}
        <Dialog
          open={openNewPost}
          onClose={() => setOpenNewPost(false)}
          maxWidth="md"
          fullWidth
          PaperProps={{
            sx: {
              background: 'linear-gradient(145deg, rgba(11, 75, 58, 0.95), rgba(6, 72, 50, 0.95))',
              backdropFilter: 'blur(20px)',
              border: '2px solid #F9B949',
              borderRadius: '24px',
              boxShadow: '0 25px 50px rgba(0,0,0,0.3)'
            }
          }}
        >
          <DialogTitle 
            sx={{ 
              color: '#F9B949', 
              fontWeight: '800', 
              fontSize: '1.5rem',
              textAlign: 'center',
              pb: 1
            }}
          >
            ‚úçÔ∏è T·∫°o b√†i vi·∫øt m·ªõi
          </DialogTitle>
          <DialogContent sx={{ px: 3 }}>
            <TextField
              fullWidth
              label="Ti√™u ƒë·ªÅ b√†i vi·∫øt"
              value={newPostTitle}
              onChange={(e) => setNewPostTitle(e.target.value)}
              margin="normal"
              sx={{
                '& .MuiOutlinedInput-root': {
                  background: 'rgba(255, 255, 255, 0.1)',
                  backdropFilter: 'blur(10px)',
                  borderRadius: '16px',
                  '& fieldset': { borderColor: 'rgba(249, 185, 73, 0.3)' },
                  '&:hover fieldset': { borderColor: '#F9B949' },
                  '&.Mui-focused fieldset': { borderColor: '#F9B949' }
                },
                '& .MuiInputBase-input': { color: 'white', fontSize: '1rem' },
                '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.7)' }
              }}
            />
            <TextField
              fullWidth
              label="N·ªôi dung b√†i vi·∫øt"
              value={newPostContent}
              onChange={(e) => setNewPostContent(e.target.value)}
              margin="normal"
              multiline
              rows={6}
              sx={{
                '& .MuiOutlinedInput-root': {
                  background: 'rgba(255, 255, 255, 0.1)',
                  backdropFilter: 'blur(10px)',
                  borderRadius: '16px',
                  '& fieldset': { borderColor: 'rgba(249, 185, 73, 0.3)' },
                  '&:hover fieldset': { borderColor: '#F9B949' },
                  '&.Mui-focused fieldset': { borderColor: '#F9B949' }
                },
                '& .MuiInputBase-input': { color: 'white', fontSize: '0.95rem' },
                '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.7)' }
              }}
            />
          </DialogContent>
          <DialogActions sx={{ p: 3, pt: 1 }}>
            <ActionButton
              onClick={() => setOpenNewPost(false)}
              variant="outlined"
            >
              H·ªßy b·ªè
            </ActionButton>
            <ActionButton
              onClick={handleCreatePost}
              variant="primary"
              startIcon={<AddIcon />}
            >
              ƒêƒÉng b√†i vi·∫øt
            </ActionButton>
          </DialogActions>
        </Dialog>

      </Container>
    </StyledSection>
  )
}

export default ForumSection
